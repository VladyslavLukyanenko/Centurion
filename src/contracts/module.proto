syntax = "proto3";

import "google/protobuf/descriptor.proto";

option csharp_namespace = "Centurion.Contracts";
option go_package = "github.com/CenturionLabs/centurion/checkout-service/contracts";
option java_package = "gg.centurion.contract";


// Extension Definitions

enum Module {
  YEEZY_SUPPLY = 0;
  FAKE_SHOP = 1;
  AMAZON = 2;
}

extend google.protobuf.MessageOptions {
  optional Module centurion_module = 50000;
  optional string centurion_module_display_name = 50001;
  optional string centurion_version = 50002;
  optional string centurion_checkout_mode = 50003;
  optional string centurion_monitor_mode = 50004;
}

message AllowedValue {
  string id = 1;
  string display_name = 2;
  optional string validation_regex = 3;
  optional bool discard_others = 4;
}

extend google.protobuf.OneofOptions {
  bool centurion_module_modes = 50000;
}
//
//extend google.protobuf.FieldOptions {
//}

extend google.protobuf.EnumOptions {
  optional bool centurion_allowed_values_definition = 50000;
}

extend google.protobuf.EnumValueOptions {
  optional AllowedValue centurion_allowed_value = 50000;
}


// Metadata Definitions

message ModuleMetadata {
  Module module = 1;
  string display_name = 2;
  string version = 3;
  ConfigDescriptor config = 4;
  repeated CheckoutModeMetadata modes = 5;
}

message CheckoutModeMetadata {
  string name = 1;
  ConfigDescriptor config = 2;
  optional ConfigDescriptor monitor_config = 3;
  // getProductBySku (prob url only)
}

message ConfigDescriptor {
  string message_type = 1;
  repeated ConfigFieldDescriptor fields = 2;
}

enum Cardinality {
  CARDINALITY_NONE = 0;
  REQUIRED = 0x01;
  REPEATED = 0x02;
}

message ReflectedAllowedValue
{
  AllowedValue value = 1;
  int32 index = 2;
}

message ConfigFieldDescriptor {
  string name = 1;
  uint32 cardinality = 2;
  Type type = 3;
  string type_name = 4;
  repeated ReflectedAllowedValue allowed_values = 5;
}

enum Type {
  TYPE_UNSPECIFIED = 0;
  // 0 is reserved for errors.
  // Order is weird for historical reasons.
  TYPE_DOUBLE = 1;
  TYPE_FLOAT = 2;
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
  // negative values are likely.
  TYPE_INT64 = 3;
  TYPE_UINT64 = 4;
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
  // negative values are likely.
  TYPE_INT32 = 5;
  TYPE_FIXED64 = 6;
  TYPE_FIXED32 = 7;
  TYPE_BOOL = 8;
  TYPE_STRING = 9;
  // Tag-delimited aggregate.
  // Group type is deprecated and not supported in proto3. However, Proto3
  // implementations should still be able to parse the group wire format and
  // treat group fields as unknown fields.
  TYPE_GROUP = 10;
  TYPE_MESSAGE = 11;  // Length-delimited aggregate.

  // New in version 2.
  TYPE_BYTES = 12;
  TYPE_UINT32 = 13;
  TYPE_ENUM = 14;
  TYPE_SFIXED32 = 15;
  TYPE_SFIXED64 = 16;
  TYPE_SINT32 = 17;  // Uses ZigZag encoding.
  TYPE_SINT64 = 18;  // Uses ZigZag encoding.
}