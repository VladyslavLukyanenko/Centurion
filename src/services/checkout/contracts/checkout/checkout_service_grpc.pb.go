// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package checkout

import (
	context "context"
	contracts "github.com/CenturionLabs/centurion/checkout-service/contracts"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckoutClient is the client API for Checkout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckoutClient interface {
	ConnectRpc(ctx context.Context, opts ...grpc.CallOption) (Checkout_ConnectRpcClient, error)
	ConnectCheckout(ctx context.Context, opts ...grpc.CallOption) (Checkout_ConnectCheckoutClient, error)
	ForceStop(ctx context.Context, in *ForceStopCheckoutCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSupportedModules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedModuleList, error)
	GetTasksStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksExecutingStats, error)
	FetchProduct(ctx context.Context, in *contracts.FetchProductCommand, opts ...grpc.CallOption) (*contracts.ProductData, error)
}

type checkoutClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckoutClient(cc grpc.ClientConnInterface) CheckoutClient {
	return &checkoutClient{cc}
}

func (c *checkoutClient) ConnectRpc(ctx context.Context, opts ...grpc.CallOption) (Checkout_ConnectRpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &Checkout_ServiceDesc.Streams[0], "/checkout.Checkout/ConnectRpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &checkoutConnectRpcClient{stream}
	return x, nil
}

type Checkout_ConnectRpcClient interface {
	Send(*RpcMessage) error
	Recv() (*RpcMessage, error)
	grpc.ClientStream
}

type checkoutConnectRpcClient struct {
	grpc.ClientStream
}

func (x *checkoutConnectRpcClient) Send(m *RpcMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *checkoutConnectRpcClient) Recv() (*RpcMessage, error) {
	m := new(RpcMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *checkoutClient) ConnectCheckout(ctx context.Context, opts ...grpc.CallOption) (Checkout_ConnectCheckoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Checkout_ServiceDesc.Streams[1], "/checkout.Checkout/ConnectCheckout", opts...)
	if err != nil {
		return nil, err
	}
	x := &checkoutConnectCheckoutClient{stream}
	return x, nil
}

type Checkout_ConnectCheckoutClient interface {
	Send(*CheckoutCommand) error
	Recv() (*CheckoutStatusChangedBatch, error)
	grpc.ClientStream
}

type checkoutConnectCheckoutClient struct {
	grpc.ClientStream
}

func (x *checkoutConnectCheckoutClient) Send(m *CheckoutCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *checkoutConnectCheckoutClient) Recv() (*CheckoutStatusChangedBatch, error) {
	m := new(CheckoutStatusChangedBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *checkoutClient) ForceStop(ctx context.Context, in *ForceStopCheckoutCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/checkout.Checkout/ForceStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutClient) GetSupportedModules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedModuleList, error) {
	out := new(SupportedModuleList)
	err := c.cc.Invoke(ctx, "/checkout.Checkout/GetSupportedModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutClient) GetTasksStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksExecutingStats, error) {
	out := new(TasksExecutingStats)
	err := c.cc.Invoke(ctx, "/checkout.Checkout/GetTasksStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutClient) FetchProduct(ctx context.Context, in *contracts.FetchProductCommand, opts ...grpc.CallOption) (*contracts.ProductData, error) {
	out := new(contracts.ProductData)
	err := c.cc.Invoke(ctx, "/checkout.Checkout/FetchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckoutServer is the server API for Checkout service.
// All implementations must embed UnimplementedCheckoutServer
// for forward compatibility
type CheckoutServer interface {
	ConnectRpc(Checkout_ConnectRpcServer) error
	ConnectCheckout(Checkout_ConnectCheckoutServer) error
	ForceStop(context.Context, *ForceStopCheckoutCommand) (*emptypb.Empty, error)
	GetSupportedModules(context.Context, *emptypb.Empty) (*SupportedModuleList, error)
	GetTasksStats(context.Context, *emptypb.Empty) (*TasksExecutingStats, error)
	FetchProduct(context.Context, *contracts.FetchProductCommand) (*contracts.ProductData, error)
	mustEmbedUnimplementedCheckoutServer()
}

// UnimplementedCheckoutServer must be embedded to have forward compatible implementations.
type UnimplementedCheckoutServer struct {
}

func (UnimplementedCheckoutServer) ConnectRpc(Checkout_ConnectRpcServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectRpc not implemented")
}
func (UnimplementedCheckoutServer) ConnectCheckout(Checkout_ConnectCheckoutServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectCheckout not implemented")
}
func (UnimplementedCheckoutServer) ForceStop(context.Context, *ForceStopCheckoutCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceStop not implemented")
}
func (UnimplementedCheckoutServer) GetSupportedModules(context.Context, *emptypb.Empty) (*SupportedModuleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedModules not implemented")
}
func (UnimplementedCheckoutServer) GetTasksStats(context.Context, *emptypb.Empty) (*TasksExecutingStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksStats not implemented")
}
func (UnimplementedCheckoutServer) FetchProduct(context.Context, *contracts.FetchProductCommand) (*contracts.ProductData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProduct not implemented")
}
func (UnimplementedCheckoutServer) mustEmbedUnimplementedCheckoutServer() {}

// UnsafeCheckoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckoutServer will
// result in compilation errors.
type UnsafeCheckoutServer interface {
	mustEmbedUnimplementedCheckoutServer()
}

func RegisterCheckoutServer(s grpc.ServiceRegistrar, srv CheckoutServer) {
	s.RegisterService(&Checkout_ServiceDesc, srv)
}

func _Checkout_ConnectRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CheckoutServer).ConnectRpc(&checkoutConnectRpcServer{stream})
}

type Checkout_ConnectRpcServer interface {
	Send(*RpcMessage) error
	Recv() (*RpcMessage, error)
	grpc.ServerStream
}

type checkoutConnectRpcServer struct {
	grpc.ServerStream
}

func (x *checkoutConnectRpcServer) Send(m *RpcMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *checkoutConnectRpcServer) Recv() (*RpcMessage, error) {
	m := new(RpcMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Checkout_ConnectCheckout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CheckoutServer).ConnectCheckout(&checkoutConnectCheckoutServer{stream})
}

type Checkout_ConnectCheckoutServer interface {
	Send(*CheckoutStatusChangedBatch) error
	Recv() (*CheckoutCommand, error)
	grpc.ServerStream
}

type checkoutConnectCheckoutServer struct {
	grpc.ServerStream
}

func (x *checkoutConnectCheckoutServer) Send(m *CheckoutStatusChangedBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *checkoutConnectCheckoutServer) Recv() (*CheckoutCommand, error) {
	m := new(CheckoutCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Checkout_ForceStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceStopCheckoutCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServer).ForceStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkout.Checkout/ForceStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServer).ForceStop(ctx, req.(*ForceStopCheckoutCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkout_GetSupportedModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServer).GetSupportedModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkout.Checkout/GetSupportedModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServer).GetSupportedModules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkout_GetTasksStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServer).GetTasksStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkout.Checkout/GetTasksStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServer).GetTasksStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkout_FetchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.FetchProductCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutServer).FetchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkout.Checkout/FetchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutServer).FetchProduct(ctx, req.(*contracts.FetchProductCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// Checkout_ServiceDesc is the grpc.ServiceDesc for Checkout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checkout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checkout.Checkout",
	HandlerType: (*CheckoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForceStop",
			Handler:    _Checkout_ForceStop_Handler,
		},
		{
			MethodName: "GetSupportedModules",
			Handler:    _Checkout_GetSupportedModules_Handler,
		},
		{
			MethodName: "GetTasksStats",
			Handler:    _Checkout_GetTasksStats_Handler,
		},
		{
			MethodName: "FetchProduct",
			Handler:    _Checkout_FetchProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectRpc",
			Handler:       _Checkout_ConnectRpc_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectCheckout",
			Handler:       _Checkout_ConnectCheckout_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "checkout/checkout_service.proto",
}
