// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.5
// source: checkout/messages.proto

package checkout

import (
	contracts "github.com/CenturionLabs/centurion/checkout-service/contracts"
	integration "github.com/CenturionLabs/centurion/checkout-service/contracts/checkout/integration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitializedCheckoutTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Module      contracts.Module         `protobuf:"varint,2,opt,name=module,proto3,enum=Module" json:"module,omitempty"`
	ProfileList []*contracts.ProfileData `protobuf:"bytes,3,rep,name=profile_list,json=profileList,proto3" json:"profile_list,omitempty"`
	ProxyPool   *contracts.ProxyPoolData `protobuf:"bytes,4,opt,name=proxy_pool,json=proxyPool,proto3" json:"proxy_pool,omitempty"`
	Product     *contracts.ProductData   `protobuf:"bytes,5,opt,name=product,proto3" json:"product,omitempty"`
	Config      []byte                   `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	UserId      string                   `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *InitializedCheckoutTaskData) Reset() {
	*x = InitializedCheckoutTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializedCheckoutTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializedCheckoutTaskData) ProtoMessage() {}

func (x *InitializedCheckoutTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializedCheckoutTaskData.ProtoReflect.Descriptor instead.
func (*InitializedCheckoutTaskData) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{0}
}

func (x *InitializedCheckoutTaskData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InitializedCheckoutTaskData) GetModule() contracts.Module {
	if x != nil {
		return x.Module
	}
	return contracts.Module_YEEZY_SUPPLY
}

func (x *InitializedCheckoutTaskData) GetProfileList() []*contracts.ProfileData {
	if x != nil {
		return x.ProfileList
	}
	return nil
}

func (x *InitializedCheckoutTaskData) GetProxyPool() *contracts.ProxyPoolData {
	if x != nil {
		return x.ProxyPool
	}
	return nil
}

func (x *InitializedCheckoutTaskData) GetProduct() *contracts.ProductData {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *InitializedCheckoutTaskData) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InitializedCheckoutTaskData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type StopCheckoutDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopCheckoutDetails) Reset() {
	*x = StopCheckoutDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCheckoutDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCheckoutDetails) ProtoMessage() {}

func (x *StopCheckoutDetails) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCheckoutDetails.ProtoReflect.Descriptor instead.
func (*StopCheckoutDetails) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{1}
}

func (x *StopCheckoutDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopCheckoutCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*StopCheckoutDetails `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *StopCheckoutCommand) Reset() {
	*x = StopCheckoutCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCheckoutCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCheckoutCommand) ProtoMessage() {}

func (x *StopCheckoutCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCheckoutCommand.ProtoReflect.Descriptor instead.
func (*StopCheckoutCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{2}
}

func (x *StopCheckoutCommand) GetTasks() []*StopCheckoutDetails {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ForceStopCheckoutCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *StopCheckoutCommand `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	UserId string               `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ForceStopCheckoutCommand) Reset() {
	*x = ForceStopCheckoutCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceStopCheckoutCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceStopCheckoutCommand) ProtoMessage() {}

func (x *ForceStopCheckoutCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceStopCheckoutCommand.ProtoReflect.Descriptor instead.
func (*ForceStopCheckoutCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ForceStopCheckoutCommand) GetCmd() *StopCheckoutCommand {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *ForceStopCheckoutCommand) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type StartCheckoutCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*InitializedCheckoutTaskData `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *StartCheckoutCommand) Reset() {
	*x = StartCheckoutCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCheckoutCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCheckoutCommand) ProtoMessage() {}

func (x *StartCheckoutCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCheckoutCommand.ProtoReflect.Descriptor instead.
func (*StartCheckoutCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{4}
}

func (x *StartCheckoutCommand) GetTasks() []*InitializedCheckoutTaskData {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CheckoutCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*CheckoutCommand_Start
	//	*CheckoutCommand_Stop
	Command isCheckoutCommand_Command `protobuf_oneof:"command"`
}

func (x *CheckoutCommand) Reset() {
	*x = CheckoutCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutCommand) ProtoMessage() {}

func (x *CheckoutCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutCommand.ProtoReflect.Descriptor instead.
func (*CheckoutCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{5}
}

func (m *CheckoutCommand) GetCommand() isCheckoutCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CheckoutCommand) GetStart() *StartCheckoutCommand {
	if x, ok := x.GetCommand().(*CheckoutCommand_Start); ok {
		return x.Start
	}
	return nil
}

func (x *CheckoutCommand) GetStop() *StopCheckoutCommand {
	if x, ok := x.GetCommand().(*CheckoutCommand_Stop); ok {
		return x.Stop
	}
	return nil
}

type isCheckoutCommand_Command interface {
	isCheckoutCommand_Command()
}

type CheckoutCommand_Start struct {
	Start *StartCheckoutCommand `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type CheckoutCommand_Stop struct {
	Stop *StopCheckoutCommand `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

func (*CheckoutCommand_Start) isCheckoutCommand_Command() {}

func (*CheckoutCommand_Stop) isCheckoutCommand_Command() {}

type CheckoutStatusChangedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses map[string]*integration.CheckoutStatusChanged `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckoutStatusChangedList) Reset() {
	*x = CheckoutStatusChangedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutStatusChangedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutStatusChangedList) ProtoMessage() {}

func (x *CheckoutStatusChangedList) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutStatusChangedList.ProtoReflect.Descriptor instead.
func (*CheckoutStatusChangedList) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CheckoutStatusChangedList) GetStatuses() map[string]*integration.CheckoutStatusChanged {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type CheckoutStatusChangedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes map[string]*contracts.TaskStatusData `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckoutStatusChangedBatch) Reset() {
	*x = CheckoutStatusChangedBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutStatusChangedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutStatusChangedBatch) ProtoMessage() {}

func (x *CheckoutStatusChangedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutStatusChangedBatch.ProtoReflect.Descriptor instead.
func (*CheckoutStatusChangedBatch) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CheckoutStatusChangedBatch) GetChanges() map[string]*contracts.TaskStatusData {
	if x != nil {
		return x.Changes
	}
	return nil
}

type TasksExecutingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount   int32            `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	PerUserCount map[string]int32 `protobuf:"bytes,2,rep,name=per_user_count,json=perUserCount,proto3" json:"per_user_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TasksExecutingStats) Reset() {
	*x = TasksExecutingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksExecutingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksExecutingStats) ProtoMessage() {}

func (x *TasksExecutingStats) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksExecutingStats.ProtoReflect.Descriptor instead.
func (*TasksExecutingStats) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{8}
}

func (x *TasksExecutingStats) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TasksExecutingStats) GetPerUserCount() map[string]int32 {
	if x != nil {
		return x.PerUserCount
	}
	return nil
}

type SupportedModuleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*contracts.ModuleMetadata `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *SupportedModuleList) Reset() {
	*x = SupportedModuleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedModuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedModuleList) ProtoMessage() {}

func (x *SupportedModuleList) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedModuleList.ProtoReflect.Descriptor instead.
func (*SupportedModuleList) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{9}
}

func (x *SupportedModuleList) GetModules() []*contracts.ModuleMetadata {
	if x != nil {
		return x.Modules
	}
	return nil
}

type RpcMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are assignable to Payload:
	//	*RpcMessage_Init
	//	*RpcMessage_InitReply
	//	*RpcMessage_ActionError
	//	*RpcMessage_SolveCaptcha
	//	*RpcMessage_SolveCaptchaReply
	//	*RpcMessage_Solve_3Ds2
	//	*RpcMessage_Solve_3Ds2Reply
	//	*RpcMessage_SmsConfirmation
	//	*RpcMessage_SmsConfirmationAck
	//	*RpcMessage_SmsConfirmationReply
	Payload isRpcMessage_Payload `protobuf_oneof:"payload"`
}

func (x *RpcMessage) Reset() {
	*x = RpcMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMessage) ProtoMessage() {}

func (x *RpcMessage) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMessage.ProtoReflect.Descriptor instead.
func (*RpcMessage) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{10}
}

func (x *RpcMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (m *RpcMessage) GetPayload() isRpcMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RpcMessage) GetInit() *InitHarvesterCommand {
	if x, ok := x.GetPayload().(*RpcMessage_Init); ok {
		return x.Init
	}
	return nil
}

func (x *RpcMessage) GetInitReply() *InitHarvesterReply {
	if x, ok := x.GetPayload().(*RpcMessage_InitReply); ok {
		return x.InitReply
	}
	return nil
}

func (x *RpcMessage) GetActionError() *HarvesterActionError {
	if x, ok := x.GetPayload().(*RpcMessage_ActionError); ok {
		return x.ActionError
	}
	return nil
}

func (x *RpcMessage) GetSolveCaptcha() *SolveCaptchaHarvesterCommand {
	if x, ok := x.GetPayload().(*RpcMessage_SolveCaptcha); ok {
		return x.SolveCaptcha
	}
	return nil
}

func (x *RpcMessage) GetSolveCaptchaReply() *SolveCaptchaHarvesterReply {
	if x, ok := x.GetPayload().(*RpcMessage_SolveCaptchaReply); ok {
		return x.SolveCaptchaReply
	}
	return nil
}

func (x *RpcMessage) GetSolve_3Ds2() *Solve3DS2Command {
	if x, ok := x.GetPayload().(*RpcMessage_Solve_3Ds2); ok {
		return x.Solve_3Ds2
	}
	return nil
}

func (x *RpcMessage) GetSolve_3Ds2Reply() *Solve3DS2CommandReply {
	if x, ok := x.GetPayload().(*RpcMessage_Solve_3Ds2Reply); ok {
		return x.Solve_3Ds2Reply
	}
	return nil
}

func (x *RpcMessage) GetSmsConfirmation() *SmsConfirmationCommand {
	if x, ok := x.GetPayload().(*RpcMessage_SmsConfirmation); ok {
		return x.SmsConfirmation
	}
	return nil
}

func (x *RpcMessage) GetSmsConfirmationAck() *SmsConfirmationCommandReplyAck {
	if x, ok := x.GetPayload().(*RpcMessage_SmsConfirmationAck); ok {
		return x.SmsConfirmationAck
	}
	return nil
}

func (x *RpcMessage) GetSmsConfirmationReply() *SmsConfirmationCommandReply {
	if x, ok := x.GetPayload().(*RpcMessage_SmsConfirmationReply); ok {
		return x.SmsConfirmationReply
	}
	return nil
}

type isRpcMessage_Payload interface {
	isRpcMessage_Payload()
}

type RpcMessage_Init struct {
	Init *InitHarvesterCommand `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type RpcMessage_InitReply struct {
	InitReply *InitHarvesterReply `protobuf:"bytes,3,opt,name=init_reply,json=initReply,proto3,oneof"`
}

type RpcMessage_ActionError struct {
	ActionError *HarvesterActionError `protobuf:"bytes,4,opt,name=action_error,json=actionError,proto3,oneof"`
}

type RpcMessage_SolveCaptcha struct {
	SolveCaptcha *SolveCaptchaHarvesterCommand `protobuf:"bytes,5,opt,name=solve_captcha,json=solveCaptcha,proto3,oneof"`
}

type RpcMessage_SolveCaptchaReply struct {
	SolveCaptchaReply *SolveCaptchaHarvesterReply `protobuf:"bytes,6,opt,name=solve_captcha_reply,json=solveCaptchaReply,proto3,oneof"`
}

type RpcMessage_Solve_3Ds2 struct {
	Solve_3Ds2 *Solve3DS2Command `protobuf:"bytes,7,opt,name=solve_3ds2,json=solve3ds2,proto3,oneof"`
}

type RpcMessage_Solve_3Ds2Reply struct {
	Solve_3Ds2Reply *Solve3DS2CommandReply `protobuf:"bytes,8,opt,name=solve_3ds2_reply,json=solve3ds2Reply,proto3,oneof"`
}

type RpcMessage_SmsConfirmation struct {
	SmsConfirmation *SmsConfirmationCommand `protobuf:"bytes,9,opt,name=sms_confirmation,json=smsConfirmation,proto3,oneof"`
}

type RpcMessage_SmsConfirmationAck struct {
	SmsConfirmationAck *SmsConfirmationCommandReplyAck `protobuf:"bytes,10,opt,name=sms_confirmation_ack,json=smsConfirmationAck,proto3,oneof"`
}

type RpcMessage_SmsConfirmationReply struct {
	SmsConfirmationReply *SmsConfirmationCommandReply `protobuf:"bytes,11,opt,name=sms_confirmation_reply,json=smsConfirmationReply,proto3,oneof"`
}

func (*RpcMessage_Init) isRpcMessage_Payload() {}

func (*RpcMessage_InitReply) isRpcMessage_Payload() {}

func (*RpcMessage_ActionError) isRpcMessage_Payload() {}

func (*RpcMessage_SolveCaptcha) isRpcMessage_Payload() {}

func (*RpcMessage_SolveCaptchaReply) isRpcMessage_Payload() {}

func (*RpcMessage_Solve_3Ds2) isRpcMessage_Payload() {}

func (*RpcMessage_Solve_3Ds2Reply) isRpcMessage_Payload() {}

func (*RpcMessage_SmsConfirmation) isRpcMessage_Payload() {}

func (*RpcMessage_SmsConfirmationAck) isRpcMessage_Payload() {}

func (*RpcMessage_SmsConfirmationReply) isRpcMessage_Payload() {}

type InitHarvesterCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitHarvesterCommand) Reset() {
	*x = InitHarvesterCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitHarvesterCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitHarvesterCommand) ProtoMessage() {}

func (x *InitHarvesterCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitHarvesterCommand.ProtoReflect.Descriptor instead.
func (*InitHarvesterCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{11}
}

type InitHarvesterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HarvesterId string `protobuf:"bytes,1,opt,name=harvester_id,json=harvesterId,proto3" json:"harvester_id,omitempty"`
}

func (x *InitHarvesterReply) Reset() {
	*x = InitHarvesterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitHarvesterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitHarvesterReply) ProtoMessage() {}

func (x *InitHarvesterReply) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitHarvesterReply.ProtoReflect.Descriptor instead.
func (*InitHarvesterReply) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{12}
}

func (x *InitHarvesterReply) GetHarvesterId() string {
	if x != nil {
		return x.HarvesterId
	}
	return ""
}

type HarvesterActionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HarvesterId *string `protobuf:"bytes,1,opt,name=harvester_id,json=harvesterId,proto3,oneof" json:"harvester_id,omitempty"`
}

func (x *HarvesterActionError) Reset() {
	*x = HarvesterActionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarvesterActionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarvesterActionError) ProtoMessage() {}

func (x *HarvesterActionError) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarvesterActionError.ProtoReflect.Descriptor instead.
func (*HarvesterActionError) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{13}
}

func (x *HarvesterActionError) GetHarvesterId() string {
	if x != nil && x.HarvesterId != nil {
		return *x.HarvesterId
	}
	return ""
}

type SolveCaptchaHarvesterCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HarvesterId string `protobuf:"bytes,1,opt,name=harvester_id,json=harvesterId,proto3" json:"harvester_id,omitempty"`
	ProductUrl  string `protobuf:"bytes,2,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
}

func (x *SolveCaptchaHarvesterCommand) Reset() {
	*x = SolveCaptchaHarvesterCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolveCaptchaHarvesterCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolveCaptchaHarvesterCommand) ProtoMessage() {}

func (x *SolveCaptchaHarvesterCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolveCaptchaHarvesterCommand.ProtoReflect.Descriptor instead.
func (*SolveCaptchaHarvesterCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{14}
}

func (x *SolveCaptchaHarvesterCommand) GetHarvesterId() string {
	if x != nil {
		return x.HarvesterId
	}
	return ""
}

func (x *SolveCaptchaHarvesterCommand) GetProductUrl() string {
	if x != nil {
		return x.ProductUrl
	}
	return ""
}

type ReCaptchaToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptchaToken string                 `protobuf:"bytes,1,opt,name=captcha_token,json=captchaToken,proto3" json:"captcha_token,omitempty"`
	SolvedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=solved_at,json=solvedAt,proto3" json:"solved_at,omitempty"`
}

func (x *ReCaptchaToken) Reset() {
	*x = ReCaptchaToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReCaptchaToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReCaptchaToken) ProtoMessage() {}

func (x *ReCaptchaToken) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReCaptchaToken.ProtoReflect.Descriptor instead.
func (*ReCaptchaToken) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ReCaptchaToken) GetCaptchaToken() string {
	if x != nil {
		return x.CaptchaToken
	}
	return ""
}

func (x *ReCaptchaToken) GetSolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SolvedAt
	}
	return nil
}

type SolveCaptchaHarvesterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *ReCaptchaToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SolveCaptchaHarvesterReply) Reset() {
	*x = SolveCaptchaHarvesterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolveCaptchaHarvesterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolveCaptchaHarvesterReply) ProtoMessage() {}

func (x *SolveCaptchaHarvesterReply) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolveCaptchaHarvesterReply.ProtoReflect.Descriptor instead.
func (*SolveCaptchaHarvesterReply) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{16}
}

func (x *SolveCaptchaHarvesterReply) GetToken() *ReCaptchaToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type SmsConfirmationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DisplayTaskId string `protobuf:"bytes,2,opt,name=display_task_id,json=displayTaskId,proto3" json:"display_task_id,omitempty"`
}

func (x *SmsConfirmationCommand) Reset() {
	*x = SmsConfirmationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsConfirmationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConfirmationCommand) ProtoMessage() {}

func (x *SmsConfirmationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConfirmationCommand.ProtoReflect.Descriptor instead.
func (*SmsConfirmationCommand) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{17}
}

func (x *SmsConfirmationCommand) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SmsConfirmationCommand) GetDisplayTaskId() string {
	if x != nil {
		return x.DisplayTaskId
	}
	return ""
}

type SmsConfirmationCommandReplyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	DisplayTaskId string `protobuf:"bytes,2,opt,name=display_task_id,json=displayTaskId,proto3" json:"display_task_id,omitempty"`
}

func (x *SmsConfirmationCommandReplyAck) Reset() {
	*x = SmsConfirmationCommandReplyAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsConfirmationCommandReplyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConfirmationCommandReplyAck) ProtoMessage() {}

func (x *SmsConfirmationCommandReplyAck) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConfirmationCommandReplyAck.ProtoReflect.Descriptor instead.
func (*SmsConfirmationCommandReplyAck) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{18}
}

func (x *SmsConfirmationCommandReplyAck) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SmsConfirmationCommandReplyAck) GetDisplayTaskId() string {
	if x != nil {
		return x.DisplayTaskId
	}
	return ""
}

type SmsConfirmationCommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmsCode string `protobuf:"bytes,1,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	Skip    bool   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *SmsConfirmationCommandReply) Reset() {
	*x = SmsConfirmationCommandReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsConfirmationCommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsConfirmationCommandReply) ProtoMessage() {}

func (x *SmsConfirmationCommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsConfirmationCommandReply.ProtoReflect.Descriptor instead.
func (*SmsConfirmationCommandReply) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{19}
}

func (x *SmsConfirmationCommandReply) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *SmsConfirmationCommandReply) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

type Solve3DS2Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent   string            `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	FormMethod  string            `protobuf:"bytes,2,opt,name=form_method,json=formMethod,proto3" json:"form_method,omitempty"`
	FormAction  string            `protobuf:"bytes,3,opt,name=form_action,json=formAction,proto3" json:"form_action,omitempty"`
	FormFields  map[string]string `protobuf:"bytes,4,rep,name=form_fields,json=formFields,proto3" json:"form_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EncodedData string            `protobuf:"bytes,5,opt,name=encoded_data,json=encodedData,proto3" json:"encoded_data,omitempty"`
	TermUrl     string            `protobuf:"bytes,6,opt,name=term_url,json=termUrl,proto3" json:"term_url,omitempty"`
	ProxyUrl    string            `protobuf:"bytes,7,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
}

func (x *Solve3DS2Command) Reset() {
	*x = Solve3DS2Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solve3DS2Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solve3DS2Command) ProtoMessage() {}

func (x *Solve3DS2Command) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solve3DS2Command.ProtoReflect.Descriptor instead.
func (*Solve3DS2Command) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{20}
}

func (x *Solve3DS2Command) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Solve3DS2Command) GetFormMethod() string {
	if x != nil {
		return x.FormMethod
	}
	return ""
}

func (x *Solve3DS2Command) GetFormAction() string {
	if x != nil {
		return x.FormAction
	}
	return ""
}

func (x *Solve3DS2Command) GetFormFields() map[string]string {
	if x != nil {
		return x.FormFields
	}
	return nil
}

func (x *Solve3DS2Command) GetEncodedData() string {
	if x != nil {
		return x.EncodedData
	}
	return ""
}

func (x *Solve3DS2Command) GetTermUrl() string {
	if x != nil {
		return x.TermUrl
	}
	return ""
}

func (x *Solve3DS2Command) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

type Solve3DS2CommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload map[string]string `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Solve3DS2CommandReply) Reset() {
	*x = Solve3DS2CommandReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_checkout_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solve3DS2CommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solve3DS2CommandReply) ProtoMessage() {}

func (x *Solve3DS2CommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_checkout_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solve3DS2CommandReply.ProtoReflect.Descriptor instead.
func (*Solve3DS2CommandReply) Descriptor() ([]byte, []int) {
	return file_checkout_messages_proto_rawDescGZIP(), []int{21}
}

func (x *Solve3DS2CommandReply) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

var file_checkout_messages_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50000,
		Name:          "checkout.centurion_header_user_id",
		Tag:           "bytes,50000,opt,name=centurion_header_user_id",
		Filename:      "checkout/messages.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional string centurion_header_user_id = 50000;
	E_CenturionHeaderUserId = &file_checkout_messages_proto_extTypes[0]
)

var File_checkout_messages_proto protoreflect.FileDescriptor

var file_checkout_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x1a, 0x21, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x13, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xad, 0x06, 0x0a,
	0x0a, 0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x12, 0x3d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x43, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x6c, 0x76,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x33, 0x64, 0x73, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x33, 0x44, 0x53, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x33, 0x64, 0x73, 0x32, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x5f, 0x33, 0x64, 0x73, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x33, 0x44, 0x53, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x33, 0x64, 0x73, 0x32,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x14, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x62,
	0x0a, 0x1c, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x48, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x22, 0x6e, 0x0a, 0x0e, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x4c, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x63, 0x0a, 0x16, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1b, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x22, 0xda, 0x02, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x33, 0x44, 0x53, 0x32, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x33, 0x44, 0x53, 0x32,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x1a, 0x3d,
	0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01,
	0x0a, 0x15, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x33, 0x44, 0x53, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x33, 0x44, 0x53, 0x32, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5a, 0x0a, 0x18, 0x63,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x7e, 0x0a, 0x15, 0x67, 0x67, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x75, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0xaa, 0x02, 0x1c, 0x43, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_checkout_messages_proto_rawDescOnce sync.Once
	file_checkout_messages_proto_rawDescData = file_checkout_messages_proto_rawDesc
)

func file_checkout_messages_proto_rawDescGZIP() []byte {
	file_checkout_messages_proto_rawDescOnce.Do(func() {
		file_checkout_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_checkout_messages_proto_rawDescData)
	})
	return file_checkout_messages_proto_rawDescData
}

var file_checkout_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_checkout_messages_proto_goTypes = []interface{}{
	(*InitializedCheckoutTaskData)(nil),       // 0: checkout.InitializedCheckoutTaskData
	(*StopCheckoutDetails)(nil),               // 1: checkout.StopCheckoutDetails
	(*StopCheckoutCommand)(nil),               // 2: checkout.StopCheckoutCommand
	(*ForceStopCheckoutCommand)(nil),          // 3: checkout.ForceStopCheckoutCommand
	(*StartCheckoutCommand)(nil),              // 4: checkout.StartCheckoutCommand
	(*CheckoutCommand)(nil),                   // 5: checkout.CheckoutCommand
	(*CheckoutStatusChangedList)(nil),         // 6: checkout.CheckoutStatusChangedList
	(*CheckoutStatusChangedBatch)(nil),        // 7: checkout.CheckoutStatusChangedBatch
	(*TasksExecutingStats)(nil),               // 8: checkout.TasksExecutingStats
	(*SupportedModuleList)(nil),               // 9: checkout.SupportedModuleList
	(*RpcMessage)(nil),                        // 10: checkout.RpcMessage
	(*InitHarvesterCommand)(nil),              // 11: checkout.InitHarvesterCommand
	(*InitHarvesterReply)(nil),                // 12: checkout.InitHarvesterReply
	(*HarvesterActionError)(nil),              // 13: checkout.HarvesterActionError
	(*SolveCaptchaHarvesterCommand)(nil),      // 14: checkout.SolveCaptchaHarvesterCommand
	(*ReCaptchaToken)(nil),                    // 15: checkout.ReCaptchaToken
	(*SolveCaptchaHarvesterReply)(nil),        // 16: checkout.SolveCaptchaHarvesterReply
	(*SmsConfirmationCommand)(nil),            // 17: checkout.SmsConfirmationCommand
	(*SmsConfirmationCommandReplyAck)(nil),    // 18: checkout.SmsConfirmationCommandReplyAck
	(*SmsConfirmationCommandReply)(nil),       // 19: checkout.SmsConfirmationCommandReply
	(*Solve3DS2Command)(nil),                  // 20: checkout.Solve3DS2Command
	(*Solve3DS2CommandReply)(nil),             // 21: checkout.Solve3DS2CommandReply
	nil,                                       // 22: checkout.CheckoutStatusChangedList.StatusesEntry
	nil,                                       // 23: checkout.CheckoutStatusChangedBatch.ChangesEntry
	nil,                                       // 24: checkout.TasksExecutingStats.PerUserCountEntry
	nil,                                       // 25: checkout.Solve3DS2Command.FormFieldsEntry
	nil,                                       // 26: checkout.Solve3DS2CommandReply.PayloadEntry
	(contracts.Module)(0),                     // 27: Module
	(*contracts.ProfileData)(nil),             // 28: ProfileData
	(*contracts.ProxyPoolData)(nil),           // 29: ProxyPoolData
	(*contracts.ProductData)(nil),             // 30: ProductData
	(*contracts.ModuleMetadata)(nil),          // 31: ModuleMetadata
	(*timestamppb.Timestamp)(nil),             // 32: google.protobuf.Timestamp
	(*integration.CheckoutStatusChanged)(nil), // 33: checkout.integration.CheckoutStatusChanged
	(*contracts.TaskStatusData)(nil),          // 34: TaskStatusData
	(*descriptorpb.ServiceOptions)(nil),       // 35: google.protobuf.ServiceOptions
}
var file_checkout_messages_proto_depIdxs = []int32{
	27, // 0: checkout.InitializedCheckoutTaskData.module:type_name -> Module
	28, // 1: checkout.InitializedCheckoutTaskData.profile_list:type_name -> ProfileData
	29, // 2: checkout.InitializedCheckoutTaskData.proxy_pool:type_name -> ProxyPoolData
	30, // 3: checkout.InitializedCheckoutTaskData.product:type_name -> ProductData
	1,  // 4: checkout.StopCheckoutCommand.tasks:type_name -> checkout.StopCheckoutDetails
	2,  // 5: checkout.ForceStopCheckoutCommand.cmd:type_name -> checkout.StopCheckoutCommand
	0,  // 6: checkout.StartCheckoutCommand.tasks:type_name -> checkout.InitializedCheckoutTaskData
	4,  // 7: checkout.CheckoutCommand.start:type_name -> checkout.StartCheckoutCommand
	2,  // 8: checkout.CheckoutCommand.stop:type_name -> checkout.StopCheckoutCommand
	22, // 9: checkout.CheckoutStatusChangedList.statuses:type_name -> checkout.CheckoutStatusChangedList.StatusesEntry
	23, // 10: checkout.CheckoutStatusChangedBatch.changes:type_name -> checkout.CheckoutStatusChangedBatch.ChangesEntry
	24, // 11: checkout.TasksExecutingStats.per_user_count:type_name -> checkout.TasksExecutingStats.PerUserCountEntry
	31, // 12: checkout.SupportedModuleList.modules:type_name -> ModuleMetadata
	11, // 13: checkout.RpcMessage.init:type_name -> checkout.InitHarvesterCommand
	12, // 14: checkout.RpcMessage.init_reply:type_name -> checkout.InitHarvesterReply
	13, // 15: checkout.RpcMessage.action_error:type_name -> checkout.HarvesterActionError
	14, // 16: checkout.RpcMessage.solve_captcha:type_name -> checkout.SolveCaptchaHarvesterCommand
	16, // 17: checkout.RpcMessage.solve_captcha_reply:type_name -> checkout.SolveCaptchaHarvesterReply
	20, // 18: checkout.RpcMessage.solve_3ds2:type_name -> checkout.Solve3DS2Command
	21, // 19: checkout.RpcMessage.solve_3ds2_reply:type_name -> checkout.Solve3DS2CommandReply
	17, // 20: checkout.RpcMessage.sms_confirmation:type_name -> checkout.SmsConfirmationCommand
	18, // 21: checkout.RpcMessage.sms_confirmation_ack:type_name -> checkout.SmsConfirmationCommandReplyAck
	19, // 22: checkout.RpcMessage.sms_confirmation_reply:type_name -> checkout.SmsConfirmationCommandReply
	32, // 23: checkout.ReCaptchaToken.solved_at:type_name -> google.protobuf.Timestamp
	15, // 24: checkout.SolveCaptchaHarvesterReply.token:type_name -> checkout.ReCaptchaToken
	25, // 25: checkout.Solve3DS2Command.form_fields:type_name -> checkout.Solve3DS2Command.FormFieldsEntry
	26, // 26: checkout.Solve3DS2CommandReply.payload:type_name -> checkout.Solve3DS2CommandReply.PayloadEntry
	33, // 27: checkout.CheckoutStatusChangedList.StatusesEntry.value:type_name -> checkout.integration.CheckoutStatusChanged
	34, // 28: checkout.CheckoutStatusChangedBatch.ChangesEntry.value:type_name -> TaskStatusData
	35, // 29: checkout.centurion_header_user_id:extendee -> google.protobuf.ServiceOptions
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	29, // [29:30] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_checkout_messages_proto_init() }
func file_checkout_messages_proto_init() {
	if File_checkout_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_checkout_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializedCheckoutTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCheckoutDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCheckoutCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceStopCheckoutCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCheckoutCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutStatusChangedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutStatusChangedBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksExecutingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedModuleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitHarvesterCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitHarvesterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarvesterActionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolveCaptchaHarvesterCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReCaptchaToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolveCaptchaHarvesterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsConfirmationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsConfirmationCommandReplyAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsConfirmationCommandReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solve3DS2Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_checkout_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solve3DS2CommandReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_checkout_messages_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CheckoutCommand_Start)(nil),
		(*CheckoutCommand_Stop)(nil),
	}
	file_checkout_messages_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RpcMessage_Init)(nil),
		(*RpcMessage_InitReply)(nil),
		(*RpcMessage_ActionError)(nil),
		(*RpcMessage_SolveCaptcha)(nil),
		(*RpcMessage_SolveCaptchaReply)(nil),
		(*RpcMessage_Solve_3Ds2)(nil),
		(*RpcMessage_Solve_3Ds2Reply)(nil),
		(*RpcMessage_SmsConfirmation)(nil),
		(*RpcMessage_SmsConfirmationAck)(nil),
		(*RpcMessage_SmsConfirmationReply)(nil),
	}
	file_checkout_messages_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_checkout_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_checkout_messages_proto_goTypes,
		DependencyIndexes: file_checkout_messages_proto_depIdxs,
		MessageInfos:      file_checkout_messages_proto_msgTypes,
		ExtensionInfos:    file_checkout_messages_proto_extTypes,
	}.Build()
	File_checkout_messages_proto = out.File
	file_checkout_messages_proto_rawDesc = nil
	file_checkout_messages_proto_goTypes = nil
	file_checkout_messages_proto_depIdxs = nil
}
