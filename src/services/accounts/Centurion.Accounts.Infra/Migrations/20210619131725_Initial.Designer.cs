// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Centurion.Accounts.Infra;

namespace Centurion.Accounts.Infra.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    [Migration("20210619131725_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("charge_backer_hi_lo_sequence", "charge_backers")
                .IncrementsBy(10);

            modelBuilder.HasSequence("discord_embed_web_hook_binding_hi_lo_sequence", "embeds")
                .IncrementsBy(10);

            modelBuilder.HasSequence("form_component_hi_lo_sequence", "forms")
                .IncrementsBy(10);

            modelBuilder.HasSequence("form_hi_lo_sequence", "forms")
                .IncrementsBy(10);

            modelBuilder.HasSequence("form_response_hi_lo_sequence", "forms")
                .IncrementsBy(10);

            modelBuilder.HasSequence("license_key_hi_lo_sequence", "products")
                .IncrementsBy(10);

            modelBuilder.HasSequence("member_role_hi_lo_sequence", "security")
                .IncrementsBy(10);

            modelBuilder.HasSequence("plan_hi_lo_sequence", "products")
                .IncrementsBy(10);

            modelBuilder.HasSequence("published_web_hook_hi_lo_sequence", "web_hooks")
                .IncrementsBy(10);

            modelBuilder.HasSequence("release_hi_lo_sequence", "products")
                .IncrementsBy(10);

            modelBuilder.HasSequence("role_hi_lo_sequence", "identity")
                .IncrementsBy(10);

            modelBuilder.HasSequence("user_claim_hi_lo_sequence", "identity")
                .IncrementsBy(10);

            modelBuilder.HasSequence("user_hi_lo_sequence", "identity")
                .IncrementsBy(10);

            modelBuilder.HasSequence("user_member_role_binding_hi_lo_sequence", "security")
                .IncrementsBy(10);

            modelBuilder.HasSequence("web_hook_binding_hi_lo_sequence", "web_hooks")
                .IncrementsBy(10);

            modelBuilder.Entity("Centurion.Accounts.Core.Analytics.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<Instant>("LastActivityAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_activity_at");

                    b.Property<Instant>("StartedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("started_at");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_user_session_dashboard_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_session_user_id");

                    b.ToTable("user_session", "analytics");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Audit.ChangeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_change_set");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_change_set_updated_by");

                    b.ToTable("change_set", "audit");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.ChargeBackers.ChargeBacker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "charge_backer_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "charge_backers")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("CardFingerprints")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("card_fingerprints");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Instant?>("ExportedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("exported_at");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("pk_charge_backer");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_charge_backer_dashboard_id");

                    b.ToTable("charge_backer", "charge_backers");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Embeds.DiscordEmbedWebHookBinding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "discord_embed_web_hook_binding_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "embeds")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("message_template");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_url");

                    b.HasKey("Id")
                        .HasName("pk_discord_embed_web_hook_binding");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_discord_embed_web_hook_binding_dashboard_id");

                    b.ToTable("discord_embed_web_hook_binding", "embeds");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.Form", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "form_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "forms")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<Instant?>("PublishedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("published_at");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_form");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_form_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_form_dashboard_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_form_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_form_updated_by");

                    b.ToTable("form", "forms");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "form_component_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "forms")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FormId")
                        .HasColumnType("bigint")
                        .HasColumnName("form_id");

                    b.Property<long>("Order")
                        .HasColumnType("bigint")
                        .HasColumnName("order");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_form_component");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_form_component_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_form_component_dashboard_id");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_form_component_form_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_form_component_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_form_component_updated_by");

                    b.ToTable("form_component", "forms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormComponent");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "form_response_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "forms")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<long>("FormId")
                        .HasColumnType("bigint")
                        .HasColumnName("form_id");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<long>("RespondedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("responded_by");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_form_response");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_form_response_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_form_response_dashboard_id");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_form_response_form_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_form_response_removed_at");

                    b.HasIndex("RespondedBy")
                        .HasDatabaseName("ix_form_response_responded_by");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_form_response_updated_by");

                    b.ToTable("form_response", "forms");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "role_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "identity")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("role", "identity");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "identity")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("DiscordRoles")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("discord_roles");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<Instant>("LastRefreshedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_refreshed_at");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text")
                        .HasColumnName("stripe_customer_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_user_created_by");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_user_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_user_updated_by");

                    b.ToTable("user", "identity");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_claim_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "identity")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", "identity");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "identity");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Orders.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_type");

                    b.Property<string>("SourceTxId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_tx_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payment_transaction");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_payment_transaction_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_payment_transaction_dashboard_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_payment_transaction_updated_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_payment_transaction_user_id");

                    b.ToTable("payment_transaction", "orders");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("ChargeBackersExportEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("charge_backers_export_enabled");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Instant?>("ExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_at");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_dashboard");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_dashboard_created_by");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_dashboard_owner_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_dashboard_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_dashboard_updated_by");

                    b.ToTable("dashboard", "products");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.LicenseKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "license_key_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "products")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<Instant?>("Expiry")
                        .HasColumnType("timestamp")
                        .HasColumnName("expiry");

                    b.Property<Instant?>("LastAuthRequest")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_auth_request");

                    b.Property<string>("PaymentIntent")
                        .HasColumnType("text")
                        .HasColumnName("payment_intent");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint")
                        .HasColumnName("plan_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long?>("ReleaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("release_id");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<Instant?>("SubscribedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("subscribed_at");

                    b.Property<Instant?>("SubscriptionCancelledAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("subscription_cancelled_at");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Suspensions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("suspensions");

                    b.Property<Instant?>("TrialEndsAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("trial_ends_at");

                    b.Property<Instant?>("UnbindableAfter")
                        .HasColumnType("timestamp")
                        .HasColumnName("unbindable_after");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_license_key");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_license_key_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_license_key_dashboard_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_license_key_plan_id");

                    b.HasIndex("ReleaseId")
                        .HasDatabaseName("ix_license_key_release_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_license_key_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_license_key_updated_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_license_key_user_id");

                    b.ToTable("license_key", "products");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Member", b =>
                {
                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Instant>("JoinedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("joined_at");

                    b.HasKey("DashboardId", "UserId")
                        .HasName("pk_member");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_member_user_id");

                    b.ToTable("member", "products");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "plan_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "products")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_role_id");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trial");

                    b.Property<Duration?>("LicenseLife")
                        .HasColumnType("interval")
                        .HasColumnName("license_life");

                    b.Property<bool>("ProtectPurchasesWithCaptcha")
                        .HasColumnType("boolean")
                        .HasColumnName("protect_purchases_with_captcha");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<string>("SubscriptionPlan")
                        .HasColumnType("text")
                        .HasColumnName("subscription_plan");

                    b.Property<Duration>("TrialPeriod")
                        .HasColumnType("interval")
                        .HasColumnName("trial_period");

                    b.Property<Duration?>("UnbindableDelay")
                        .HasColumnType("interval")
                        .HasColumnName("unbindable_delay");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_plan");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_plan_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_plan_dashboard_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_plan_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_plan_updated_by");

                    b.ToTable("plan", "products");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Release", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "release_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "products")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<int>("InitialStock")
                        .HasColumnType("integer")
                        .HasColumnName("initial_stock");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint")
                        .HasColumnName("plan_id");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_release");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_release_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_release_dashboard_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_release_plan_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_release_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_release_updated_by");

                    b.ToTable("release", "products");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Security.MemberRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "member_role_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "security")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ColorHex")
                        .HasColumnType("text")
                        .HasColumnName("color_hex");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<int?>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PayoutFrequency")
                        .HasColumnType("integer")
                        .HasColumnName("payout_frequency");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<Instant>("RemovedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("removed_at");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_role");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_member_role_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_member_role_dashboard_id");

                    b.HasIndex("RemovedAt")
                        .HasDatabaseName("ix_member_role_removed_at");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_member_role_updated_by");

                    b.HasIndex("Name", "DashboardId")
                        .IsUnique()
                        .HasDatabaseName("ix_member_role_name_dashboard_id");

                    b.ToTable("member_role", "security");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Security.UserMemberRoleBinding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "user_member_role_binding_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "security")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<Instant?>("LastPaidOutAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_paid_out_at");

                    b.Property<long>("MemberRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_role_id");

                    b.Property<string>("RemoteAccountId")
                        .HasColumnType("text")
                        .HasColumnName("remote_account_id");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_member_role_binding");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_user_member_role_binding_created_by");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_user_member_role_binding_dashboard_id");

                    b.HasIndex("MemberRoleId")
                        .HasDatabaseName("ix_user_member_role_binding_member_role_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_user_member_role_binding_updated_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_member_role_binding_user_id");

                    b.ToTable("user_member_role_binding", "security");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.PublishedWebHook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "published_web_hook_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "web_hooks")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("ListenerEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listener_endpoint");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text")
                        .HasColumnName("status_description");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_published_web_hook");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_published_web_hook_dashboard_id");

                    b.ToTable("published_web_hook", "web_hooks");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.WebHookBinding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:HiLoSequenceName", "web_hook_binding_hi_lo_sequence")
                        .HasAnnotation("Npgsql:HiLoSequenceSchema", "web_hooks")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo);

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<string>("ListenerEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listener_endpoint");

                    b.Property<int>("Transport")
                        .HasColumnType("integer")
                        .HasColumnName("transport");

                    b.HasKey("Id")
                        .HasName("pk_web_hook_binding");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_web_hook_binding_dashboard_id");

                    b.ToTable("web_hook_binding", "web_hooks");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.WebHooksConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("Id")
                        .HasName("pk_web_hooks_config");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_web_hooks_config_dashboard_id");

                    b.ToTable("web_hooks_config", "web_hooks");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormComponent");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint")
                        .HasColumnName("section_id");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_form_component_section_id");

                    b.HasDiscriminator().HasValue("FormField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormSection", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormComponent");

                    b.HasDiscriminator().HasValue("FormSection");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.CheckBoxesField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Options")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.HasDiscriminator().HasValue("CheckBoxesField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.CheckBoxesGridField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Columns")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("columns");

                    b.Property<string>("Rows")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("rows");

                    b.HasDiscriminator().HasValue("CheckBoxesGridField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.DropDownField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Options")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.HasDiscriminator().HasValue("DropDownField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.LinearScaleField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<byte>("Max")
                        .HasColumnType("smallint")
                        .HasColumnName("max");

                    b.Property<string>("MaxLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("max_label");

                    b.Property<byte>("Min")
                        .HasColumnType("smallint")
                        .HasColumnName("min");

                    b.Property<string>("MinLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("min_label");

                    b.HasDiscriminator().HasValue("LinearScaleField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.MultiChoiceField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.HasDiscriminator().HasValue("MultiChoiceField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.MultiChoiceGridField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Columns")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("columns");

                    b.Property<string>("Rows")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("rows");

                    b.HasDiscriminator().HasValue("MultiChoiceGridField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.ParagraphField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Placeholder")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("placeholder");

                    b.HasDiscriminator().HasValue("ParagraphField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.TextBlockField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.HasDiscriminator().HasValue("TextBlockField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.TextBoxField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.Property<string>("Placeholder")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("placeholder");

                    b.HasDiscriminator().HasValue("TextBoxField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.TimeField", b =>
                {
                    b.HasBaseType("Centurion.Accounts.Core.Forms.FormField");

                    b.HasDiscriminator().HasValue("TimeField");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Analytics.UserSession", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_user_session_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_session_user_user_id");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Audit.ChangeSet", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_change_set_user_updated_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Centurion.Accounts.Core.Audit.ChangeSetEntry", "Entries", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ChangeSetId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ChangeType")
                                .HasColumnType("integer")
                                .HasColumnName("change_type");

                            b1.Property<Instant>("CreatedAt")
                                .HasColumnType("timestamp")
                                .HasColumnName("created_at");

                            b1.Property<long?>("CreatedBy")
                                .HasColumnType("bigint")
                                .HasColumnName("created_by");

                            b1.Property<string>("EntityId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("entity_id");

                            b1.Property<string>("EntityType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("entity_type");

                            b1.Property<string>("Payload")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("payload");

                            b1.Property<Instant>("UpdatedAt")
                                .HasColumnType("timestamp")
                                .HasColumnName("updated_at");

                            b1.Property<long?>("UpdatedBy")
                                .HasColumnType("bigint")
                                .HasColumnName("updated_by");

                            b1.HasKey("Id")
                                .HasName("pk_change_set_entry");

                            b1.HasIndex("ChangeSetId")
                                .HasDatabaseName("ix_change_set_entry_change_set_id");

                            b1.ToTable("change_set_entry", "audit");

                            b1.WithOwner()
                                .HasForeignKey("ChangeSetId")
                                .HasConstraintName("fk_change_set_entry_change_set_change_set_id");
                        });

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.ChargeBackers.ChargeBacker", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_charge_backer_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Embeds.DiscordEmbedWebHookBinding", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_discord_embed_web_hook_binding_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.Form", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_form_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_form_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_form_user_updated_by");

                    b.OwnsOne("Centurion.Accounts.Core.Forms.FormSettings", "Settings", b1 =>
                        {
                            b1.Property<long>("FormId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("AllowAccessToResults")
                                .HasColumnType("boolean")
                                .HasColumnName("settings_allow_access_to_results");

                            b1.Property<bool>("LimitToSingleResponse")
                                .HasColumnType("boolean")
                                .HasColumnName("settings_limit_to_single_response");

                            b1.HasKey("FormId")
                                .HasName("pk_form");

                            b1.ToTable("form", "forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId")
                                .HasConstraintName("fk_form_form_form_id");
                        });

                    b.OwnsOne("Centurion.Accounts.Core.Forms.FormThemeSettings", "Theme", b1 =>
                        {
                            b1.Property<long>("FormId")
                                .HasColumnType("bigint");

                            b1.Property<string>("HeaderPictureSrc")
                                .HasColumnType("text")
                                .HasColumnName("theme_header_picture_src");

                            b1.Property<string>("ThemeColor")
                                .HasColumnType("text")
                                .HasColumnName("theme_theme_color");

                            b1.HasKey("FormId")
                                .HasName("pk_form");

                            b1.ToTable("form", "forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId")
                                .HasConstraintName("fk_form_form_form_id");
                        });

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("Theme")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormComponent", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_form_component_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_form_component_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Forms.Form", null)
                        .WithMany()
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_form_component_form_form_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_form_component_user_updated_by");

                    b.OwnsOne("Centurion.Accounts.Core.Forms.RichFormFieldTitle", "Name", b1 =>
                        {
                            b1.Property<long>("FormComponentId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PictureSrc")
                                .HasColumnType("text")
                                .HasColumnName("name_picture_src");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_value");

                            b1.HasKey("FormComponentId")
                                .HasName("pk_form_component");

                            b1.ToTable("form_component", "forms");

                            b1.WithOwner()
                                .HasForeignKey("FormComponentId")
                                .HasConstraintName("fk_form_component_form_component_form_component_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormResponse", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_form_response_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_form_response_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Forms.Form", null)
                        .WithMany()
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_form_response_form_form_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("RespondedBy")
                        .HasConstraintName("fk_form_response_user_responded_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_form_response_user_updated_by");

                    b.OwnsMany("Centurion.Accounts.Core.Forms.FormFieldValue", "FieldValues", b1 =>
                        {
                            b1.Property<long>("FieldId")
                                .HasColumnType("bigint")
                                .HasColumnName("field_id");

                            b1.Property<long>("FormResponseId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("FieldId", "FormResponseId")
                                .HasName("pk_form_field_value");

                            b1.HasIndex("FormResponseId")
                                .HasDatabaseName("ix_form_field_value_form_response_id");

                            b1.ToTable("form_field_value", "forms");

                            b1.HasOne("Centurion.Accounts.Core.Forms.FormField", null)
                                .WithMany()
                                .HasForeignKey("FieldId")
                                .HasConstraintName("fk_form_field_value_form_component_field_id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("FormResponseId")
                                .HasConstraintName("fk_form_field_value_form_response_form_response_id");
                        });

                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.User", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_user_updated_by");

                    b.OwnsOne("Centurion.Accounts.Core.Primitives.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("is_email_confirmed");

                            b1.Property<string>("NormalizedValue")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("normalized_email");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email");

                            b1.HasKey("UserId")
                                .HasName("pk_user");

                            b1.HasIndex("NormalizedValue")
                                .HasDatabaseName("email_index");

                            b1.ToTable("user", "identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_user_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.UserClaim", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claim_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Identity.UserRole", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.Role", "_role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", "_user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_role_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_role");

                    b.Navigation("_user");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Orders.PaymentTransaction", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_payment_transaction_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_payment_transaction_dashboard_dashboard_id");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_payment_transaction_user_updated_by");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_payment_transaction_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Dashboard", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_dashboard_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_dashboard_user_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_dashboard_user_updated_by");

                    b.OwnsOne("Centurion.Accounts.Core.Products.DiscordConfig", "DiscordConfig", b1 =>
                        {
                            b1.Property<Guid>("DashboardId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AccessToken")
                                .HasColumnType("text")
                                .HasColumnName("discord_config_access_token");

                            b1.Property<string>("BotAccessToken")
                                .HasColumnType("text")
                                .HasColumnName("discord_config_bot_access_token");

                            b1.Property<decimal>("GuildId")
                                .HasColumnType("numeric(20,0)")
                                .HasColumnName("discord_config_guild_id");

                            b1.Property<decimal>("RoleId")
                                .HasColumnType("numeric(20,0)")
                                .HasColumnName("discord_config_role_id");

                            b1.HasKey("DashboardId")
                                .HasName("pk_dashboard");

                            b1.ToTable("dashboard", "products");

                            b1.WithOwner()
                                .HasForeignKey("DashboardId")
                                .HasConstraintName("fk_dashboard_dashboard_dashboard_id");

                            b1.OwnsOne("Centurion.Accounts.Core.Products.DiscordOAuthConfig", "OAuthConfig", b2 =>
                                {
                                    b2.Property<Guid>("DiscordConfigDashboardId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("ClientId")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("discord_config_oauth_config_client_id");

                                    b2.Property<string>("ClientSecret")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("discord_config_oauth_config_client_secret");

                                    b2.Property<string>("RedirectUrl")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("discord_config_oauth_config_redirect_url");

                                    b2.Property<string>("Scope")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("discord_config_oauth_config_scope");

                                    b2.HasKey("DiscordConfigDashboardId")
                                        .HasName("pk_dashboard");

                                    b2.ToTable("dashboard", "products");

                                    b2.WithOwner()
                                        .HasForeignKey("DiscordConfigDashboardId")
                                        .HasConstraintName("fk_dashboard_dashboard_discord_config_dashboard_id");
                                });

                            b1.Navigation("OAuthConfig")
                                .IsRequired();
                        });

                    b.OwnsOne("Centurion.Accounts.Core.Products.HostingConfig", "HostingConfig", b1 =>
                        {
                            b1.Property<Guid>("DashboardId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hosting_config_domain_name");

                            b1.Property<int>("Mode")
                                .HasColumnType("integer")
                                .HasColumnName("hosting_config_mode");

                            b1.HasKey("DashboardId")
                                .HasName("pk_dashboard");

                            b1.HasIndex("Mode", "DomainName")
                                .IsUnique()
                                .HasDatabaseName("ix_dashboard_hosting_config_mode_hosting_config_domain_name");

                            b1.ToTable("dashboard", "products");

                            b1.WithOwner()
                                .HasForeignKey("DashboardId")
                                .HasConstraintName("fk_dashboard_dashboard_dashboard_id");
                        });

                    b.OwnsOne("Centurion.Accounts.Core.Products.ProductInfo", "ProductInfo", b1 =>
                        {
                            b1.Property<Guid>("DashboardId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_info_description");

                            b1.Property<string>("Features")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("product_info_features");

                            b1.Property<string>("ImageSrc")
                                .HasColumnType("text")
                                .HasColumnName("product_info_image_src");

                            b1.Property<string>("LogoSrc")
                                .HasColumnType("text")
                                .HasColumnName("product_info_logo_src");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_info_name");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("product_info_version");

                            b1.HasKey("DashboardId")
                                .HasName("pk_dashboard");

                            b1.ToTable("dashboard", "products");

                            b1.WithOwner()
                                .HasForeignKey("DashboardId")
                                .HasConstraintName("fk_dashboard_dashboard_dashboard_id");
                        });

                    b.OwnsOne("Centurion.Accounts.Core.Products.StripeIntegrationConfig", "StripeConfig", b1 =>
                        {
                            b1.Property<Guid>("DashboardId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ApiKey")
                                .HasColumnType("text")
                                .HasColumnName("stripe_config_api_key");

                            b1.Property<string>("WebHookEndpointSecret")
                                .HasColumnType("text")
                                .HasColumnName("stripe_config_web_hook_endpoint_secret");

                            b1.HasKey("DashboardId")
                                .HasName("pk_dashboard");

                            b1.ToTable("dashboard", "products");

                            b1.WithOwner()
                                .HasForeignKey("DashboardId")
                                .HasConstraintName("fk_dashboard_dashboard_dashboard_id");
                        });

                    b.Navigation("DiscordConfig")
                        .IsRequired();

                    b.Navigation("HostingConfig")
                        .IsRequired();

                    b.Navigation("ProductInfo")
                        .IsRequired();

                    b.Navigation("StripeConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.LicenseKey", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_license_key_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_license_key_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Products.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .HasConstraintName("fk_license_key_plan_plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Products.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .HasConstraintName("fk_license_key_release_release_id");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_license_key_user_updated_by");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_license_key_user_user_id");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Member", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_member_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_member_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Plan", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_plan_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_plan_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_plan_user_updated_by");

                    b.OwnsOne("Centurion.Accounts.Core.Products.LicenseKeyGeneratorConfig", "LicenseKeyConfig", b1 =>
                        {
                            b1.Property<long>("PlanId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Format")
                                .HasColumnType("integer")
                                .HasColumnName("format");

                            b1.Property<string>("Template")
                                .HasColumnType("text")
                                .HasColumnName("template");

                            b1.HasKey("PlanId")
                                .HasName("pk_plan");

                            b1.ToTable("plan", "products");

                            b1.WithOwner()
                                .HasForeignKey("PlanId")
                                .HasConstraintName("fk_plan_plan_plan_id");
                        });

                    b.Navigation("LicenseKeyConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Products.Release", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_release_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_release_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Products.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .HasConstraintName("fk_release_plan_plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_release_user_updated_by");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Security.MemberRole", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_member_role_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_member_role_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_member_role_user_updated_by");
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Security.UserMemberRoleBinding", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_user_member_role_binding_user_created_by");

                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_user_member_role_binding_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Security.MemberRole", null)
                        .WithMany()
                        .HasForeignKey("MemberRoleId")
                        .HasConstraintName("fk_user_member_role_binding_member_role_member_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_user_member_role_binding_user_updated_by");

                    b.HasOne("Centurion.Accounts.Core.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_member_role_binding_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.PublishedWebHook", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_published_web_hook_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Centurion.Accounts.Core.WebHooks.WebHookPayload", "Payload", b1 =>
                        {
                            b1.Property<long>("PublishedWebHookId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("payload_data");

                            b1.Property<string>("EventType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("payload_event_type");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("payload_signature");

                            b1.HasKey("PublishedWebHookId")
                                .HasName("pk_published_web_hook");

                            b1.ToTable("published_web_hook", "web_hooks");

                            b1.WithOwner()
                                .HasForeignKey("PublishedWebHookId")
                                .HasConstraintName("fk_published_web_hook_published_web_hook_published_web_hook_id");
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.WebHookBinding", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_web_hook_binding_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.WebHooks.WebHooksConfig", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Products.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .HasConstraintName("fk_web_hooks_config_dashboard_dashboard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Centurion.Accounts.Core.Forms.FormField", b =>
                {
                    b.HasOne("Centurion.Accounts.Core.Forms.FormSection", null)
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_form_component_form_component_section_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
