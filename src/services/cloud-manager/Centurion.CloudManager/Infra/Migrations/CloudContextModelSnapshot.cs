// <auto-generated />
using Centurion.CloudManager.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Centurion.CloudManager.Infra.Migrations
{
    [DbContext(typeof(CloudContext))]
    partial class CloudContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("node_snapshot_hi_lo_sequence", "public")
                .IncrementsBy(10);

            modelBuilder.Entity("Centurion.CloudManager.Domain.ImageInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RequiredSpawnParameters")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("required_spawn_parameters");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_image_info");

                    b.ToTable("image_info", "public");
                });

            modelBuilder.Entity("Centurion.CloudManager.Domain.NodeSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "node_snapshot_hi_lo_sequence", "public");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NodeId")
                        .HasColumnType("text")
                        .HasColumnName("node_id");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_name");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_node_snapshot");

                    b.ToTable("node_snapshot", "public");
                });

            modelBuilder.Entity("Centurion.CloudManager.Domain.NodeSnapshot", b =>
                {
                    b.OwnsOne("Centurion.CloudManager.Domain.UserInfo", "User", b1 =>
                        {
                            b1.Property<long>("NodeSnapshotId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Id")
                                .HasColumnType("text")
                                .HasColumnName("user_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("user_name");

                            b1.HasKey("NodeSnapshotId")
                                .HasName("pk_node_snapshot");

                            b1.HasIndex("Id")
                                .IsUnique()
                                .HasDatabaseName("ix_node_snapshot_user_id");

                            b1.ToTable("node_snapshot", "public");

                            b1.WithOwner()
                                .HasForeignKey("NodeSnapshotId")
                                .HasConstraintName("fk_node_snapshot_node_snapshot_node_snapshot_id");
                        });

                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
